stages:
  - deploy

deploy_ansible:
  stage: deploy
  image: python:3.10
  tags:
    - docker
  script:
    # Install required tools
    - pip install pyyaml requests

    # Convert vars.yml to extra_vars.json
    - |
      python3 <<EOF
      import yaml, json
      try:
          with open('vars.yml') as f:
              vars_yaml = yaml.safe_load(f)
          with open('extra_vars.json', 'w') as f:
              json.dump(vars_yaml, f, indent=4)
          print(f"Successfully converted vars.yml to extra_vars.json")
      except Exception as e:
          print(f"Error during conversion: {e}")
          exit(1)
      EOF

    # Debug: Display the content of extra_vars.json to ensure it was created correctly
    - cat extra_vars.json

    # Trigger AAP job template
    - |
      echo "Triggering AAP job template..."
      
      # Check if extra_vars.json is being correctly read and passed
      if [ -f "extra_vars.json" ]; then
        echo "Found extra_vars.json, contents:"
        cat extra_vars.json
      else
        echo "❌ extra_vars.json not found!"
        exit 1
      fi

      response=$(curl -s -k -X POST "https://aap.rydzinski.local/api/controller/v2/job_templates/9/launch/" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $AAP_TOKEN" \
        -d '{"extra_vars": '"$(cat extra_vars.json)"'}')

      # Print the response to help diagnose issues
      echo "Response from AAP: $response"

      # Extract the job ID from the response
      job_id=$(echo "$response" | python3 -c "import sys, json; print(json.load(sys.stdin).get('job', ''))")

      # If no job ID is found, fail the job
      if [[ -z "$job_id" ]]; then
        echo "❌ Failed to get job ID from AAP response. Response was: $response"
        exit 1
      fi

      echo "✅ AAP Job ID: $job_id"

    # Poll AAP job status (simplified version)
    - |
      while true; do
        status=$(curl -sk "https://aap.rydzinski.local/api/controller/v2/jobs/$job_id/" \
          -H "Authorization: Bearer $AAP_TOKEN")
        
        # Display current job status
        echo "Job Status: $status"

        # Check if the job has finished
        job_status=$(echo "$status" | python3 -c "import sys, json; print(json.load(sys.stdin).get('status', ''))")
        
        if [[ "$job_status" == "successful" ]]; then
          echo "✅ AAP Job completed successfully!"
          break
        elif [[ "$job_status" == "failed" ]]; then
          echo "❌ AAP Job failed!"
          exit 1
        fi

        # Wait before polling again
        sleep 30
      done
